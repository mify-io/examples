// THIS FILE IS AUTOGENERATED, DO NOT EDIT
// Generated by mify via OpenAPI Generator

// vim: set ft=go:
package openapi

type Book struct {
	Id int64 `json:"id"`

	Name string `json:"name"`
}

// AssertBookRequired checks if the required fields are not zero-ed
func AssertBookRequired(obj Book) error {
	elements := map[string]interface{}{
		"id":   obj.Id,
		"name": obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseBookRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Book (e.g. [][]Book), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseBookRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aBook, ok := obj.(Book)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertBookRequired(aBook)
	})
}
