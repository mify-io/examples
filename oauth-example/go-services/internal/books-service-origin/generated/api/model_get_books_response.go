// THIS FILE IS AUTOGENERATED, DO NOT EDIT
// Generated by mify via OpenAPI Generator

// vim: set ft=go:
package openapi

type GetBooksResponse struct {
	Books []Book `json:"books"`
}

// AssertGetBooksResponseRequired checks if the required fields are not zero-ed
func AssertGetBooksResponseRequired(obj GetBooksResponse) error {
	elements := map[string]interface{}{
		"books": obj.Books,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Books {
		if err := AssertBookRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseGetBooksResponseRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of GetBooksResponse (e.g. [][]GetBooksResponse), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseGetBooksResponseRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aGetBooksResponse, ok := obj.(GetBooksResponse)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertGetBooksResponseRequired(aGetBooksResponse)
	})
}
