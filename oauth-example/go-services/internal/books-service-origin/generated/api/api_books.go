// THIS FILE IS AUTOGENERATED, DO NOT EDIT
// Generated by mify via OpenAPI Generator

// vim: set ft=go:
package openapi

import (
	"net/http"
	"strings"

	"example.com/namespace/oauth-example/go-services/internal/books-service-origin/generated/api/auth"
	"example.com/namespace/oauth-example/go-services/internal/books-service-origin/generated/api/public"
	"example.com/namespace/oauth-example/go-services/internal/books-service-origin/generated/core"
)

var _ *openapi_auth.AuthenticationHandler = nil // To avoid unused import error

// BooksApiController binds http requests to an api service and writes the service results to the http response
type BooksApiController struct {
	ctx          *core.MifyServiceContext
	service      BooksApiServicer
	errorHandler ErrorHandler
}

// BooksApiOption for how the controller is set up.
type BooksApiOption func(*BooksApiController)

// WithBooksApiErrorHandler inject ErrorHandler into controller
func WithBooksApiErrorHandler(h ErrorHandler) BooksApiOption {
	return func(c *BooksApiController) {
		c.errorHandler = h
	}
}

// NewBooksApiController creates a default api controller
func NewBooksApiController(ctx *core.MifyServiceContext, s BooksApiServicer, opts ...BooksApiOption) Router {
	controller := &BooksApiController{
		ctx:          ctx,
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the BooksApiController
func (c *BooksApiController) Routes() Routes {
	return Routes{
		{
			"BooksGet",
			strings.ToUpper("Get"),
			"/books",
			c.BooksGet,
		},
		{
			"BooksPut",
			strings.ToUpper("Put"),
			"/books",
			c.BooksPut,
		},
	}
}

// BooksGet - get all books
func (c *BooksApiController) BooksGet(w http.ResponseWriter, r *http.Request) {
	var handlerErr error

	var requestBody []byte
	reqCtx := openapi_public.GetMifyRequestContext(r)

	var herr error
	var result ServiceResponse
	defer LogHandler(reqCtx, requestBody, &result, &handlerErr)()

	result, herr = c.service.BooksGet(reqCtx)

	// If an error occurred, encode the error with the status code
	if herr != nil {
		handlerErr = herr
		c.errorHandler(w, r, herr, &result)
		return
	}

	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// BooksPut - create new book
func (c *BooksApiController) BooksPut(w http.ResponseWriter, r *http.Request) {
	var handlerErr error

	var requestBody []byte
	createBookRequestParamRaw := CreateBookRequest{}
	var rerr error
	requestBody, rerr = readBody(r.Body)
	if rerr != nil {
		handlerErr = rerr
		c.errorHandler(w, r, &ParsingError{Err: rerr}, nil)
		return
	}
	d := getBodyDecoder(requestBody)
	d.DisallowUnknownFields()
	if err := d.Decode(&createBookRequestParamRaw); err != nil {
		handlerErr = err
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateBookRequestRequired(createBookRequestParamRaw); err != nil {
		handlerErr = err
		c.errorHandler(w, r, err, nil)
		return
	}

	createBookRequestParam := createBookRequestParamRaw

	reqCtx := openapi_public.GetMifyRequestContext(r)

	var herr error
	var result ServiceResponse
	defer LogHandler(reqCtx, requestBody, &result, &handlerErr)()

	result, herr = c.service.BooksPut(reqCtx, createBookRequestParam)

	// If an error occurred, encode the error with the status code
	if herr != nil {
		handlerErr = herr
		c.errorHandler(w, r, herr, &result)
		return
	}

	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}
