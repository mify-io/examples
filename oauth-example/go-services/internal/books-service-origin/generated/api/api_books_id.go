// THIS FILE IS AUTOGENERATED, DO NOT EDIT
// Generated by mify via OpenAPI Generator

// vim: set ft=go:
package openapi

import (
	"net/http"
	"strings"

	"example.com/namespace/oauth-example/go-services/internal/books-service-origin/generated/api/auth"
	"example.com/namespace/oauth-example/go-services/internal/books-service-origin/generated/api/public"
	"example.com/namespace/oauth-example/go-services/internal/books-service-origin/generated/core"
)

var _ *openapi_auth.AuthenticationHandler = nil // To avoid unused import error

// BooksIdApiController binds http requests to an api service and writes the service results to the http response
type BooksIdApiController struct {
	ctx          *core.MifyServiceContext
	service      BooksIdApiServicer
	errorHandler ErrorHandler
}

// BooksIdApiOption for how the controller is set up.
type BooksIdApiOption func(*BooksIdApiController)

// WithBooksIdApiErrorHandler inject ErrorHandler into controller
func WithBooksIdApiErrorHandler(h ErrorHandler) BooksIdApiOption {
	return func(c *BooksIdApiController) {
		c.errorHandler = h
	}
}

// NewBooksIdApiController creates a default api controller
func NewBooksIdApiController(ctx *core.MifyServiceContext, s BooksIdApiServicer, opts ...BooksIdApiOption) Router {
	controller := &BooksIdApiController{
		ctx:          ctx,
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the BooksIdApiController
func (c *BooksIdApiController) Routes() Routes {
	return Routes{
		{
			"BooksIdGet",
			strings.ToUpper("Get"),
			"/books/{id}",
			c.BooksIdGet,
		},
	}
}

// BooksIdGet - get book by id
func (c *BooksIdApiController) BooksIdGet(w http.ResponseWriter, r *http.Request) {
	var handlerErr error

	var requestBody []byte
	idParamRaw, err := parseInt64Parameter(getURLParam(r, "id"), true)
	if err != nil {
		handlerErr = err
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	idParam := idParamRaw

	reqCtx := openapi_public.GetMifyRequestContext(r)

	var herr error
	var result ServiceResponse
	defer LogHandler(reqCtx, requestBody, &result, &handlerErr)()

	result, herr = c.service.BooksIdGet(reqCtx, idParam)

	// If an error occurred, encode the error with the status code
	if herr != nil {
		handlerErr = herr
		c.errorHandler(w, r, herr, &result)
		return
	}

	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}
